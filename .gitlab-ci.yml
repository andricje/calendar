image: jdrouet/docker-with-buildx:stable
services:
  - docker:dind

stages:
  - Unit Tests
  - Build and Push branch
  - Build and Release latest
  - Publish release

variables:
  TEST_IMAGE: registry.richardsoper.me/richardsoper/mma-calendar:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE: registry.richardsoper.me/richardsoper/mma-calendar:latest

unittest:
  image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
  stage: Unit Tests
  script:
    - uv sync
    - uv run pytest --cov=mmacalendar --cov-report=xml --junitxml=junit.xml
  except:
    - staging
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    when: always
    paths:
      - junit.xml
    reports:
      junit: junit.xml

build:
  before_script:
    - docker run --privileged --rm tonistiigi/binfmt --install all
  after_script:
    - docker ps | grep moby/buildkit | awk '{print $1}' | xargs docker stop | xargs docker rm
  stage: Build and Push branch
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.richardsoper.me
    - docker buildx create --use
    - docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag $TEST_IMAGE .
  except:
    - main

release:
  before_script:
    - docker run --privileged --rm tonistiigi/binfmt --install all
  after_script:
    - docker ps | grep moby/buildkit | awk '{print $1}' | xargs docker stop | xargs docker rm
  stage: Build and Release latest
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.richardsoper.me
    - docker buildx create --use
    - docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag $RELEASE_IMAGE .
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"

release_job:
  stage: Publish release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - echo "running release_job for $TAG"
  release:
    tag_name: 'v0.$CI_PIPELINE_IID'
    description: 'v0.$CI_PIPELINE_IID'
    ref: '$CI_COMMIT_SHA'